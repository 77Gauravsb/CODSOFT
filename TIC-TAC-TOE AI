# Tic-Tac-Toe board representation (3x3 grid)
class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # Initialize an empty board

    def print_board(self):
        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')
        print('-------------')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def winner(self, board, player):
        # Check rows, columns, and diagonals for a win
        win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                          (0, 3, 6), (1, 4, 7), (2, 5, 8),
                          (0, 4, 8), (2, 4, 6)]
        for condition in win_conditions:
            if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:
                return True
        return False

    def game_over(self):
        return self.winner(self.board, 'X') or self.winner(self.board, 'O') or len(self.available_moves()) == 0

    def minimax(self, board, depth, maximizing_player):
        if self.winner(board, 'X'):
            return -1
        if self.winner(board, 'O'):
            return 1
        if len(self.available_moves()) == 0:
            return 0

        if maximizing_player:
            best_score = float('-inf')
            for move in self.available_moves():
                board[move] = 'O'
                score = self.minimax(board, depth + 1, False)
                board[move] = ' '
                best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for move in self.available_moves():
                board[move] = 'X'
                score = self.minimax(board, depth + 1, True)
                board[move] = ' '
                best_score = min(score, best_score)
            return best_score

    def best_move(self):
        best_score = float('-inf')
        best_move = None
        for move in self.available_moves():
            self.board[move] = 'O'
            score = self.minimax(self.board, 0, False)
            self.board[move] = ' '
            if score > best_score:
                best_score = score
                best_move = move
        return best_move

def play_game():
    game = TicTacToe()
    while not game.game_over():
        game.print_board()
        user_move = int(input("Enter your move (0-8): "))
        if user_move not in game.available_moves():
            print("Invalid move! Try again.")
            continue
        game.board[user_move] = 'X'

        if game.game_over():
            break

        ai_move = game.best_move()
        game.board[ai_move] = 'O'

    game.print_board()
    if game.winner(game.board, 'X'):
        print("You win!")
    elif game.winner(game.board, 'O'):
        print("AI wins!")
    else:
        print("It's a tie!")

# Start the game
play_game()
